!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/1e2c63f/
Assign	getSource.h	/^  Assign,$/;"	e	enum:keys
Begin	getSource.h	/^  Begin, End,       \/* 予約後 *\/$/;"	e	enum:keys
CR	getSource.c	/^static int CR;            \/* その前の改行の個数 *\/$/;"	v	typeref:typename:int	file:
Comma	getSource.h	/^  Comma, Period, Semicolon,$/;"	e	enum:keys
Const	getSource.h	/^  Var, Const, Odd,$/;"	e	enum:keys
Div	getSource.h	/^  Mult, Div,$/;"	e	enum:keys
Do	getSource.h	/^  While, Do,$/;"	e	enum:keys
End	getSource.h	/^  Begin, End,       \/* 予約後 *\/$/;"	e	enum:keys
Equal	getSource.h	/^  Equal, Lss, Gtr,$/;"	e	enum:keys
FIRSTADDR	compile.c	/^#define FIRSTADDR /;"	d	file:
Func	getSource.h	/^  Ret, Func,$/;"	e	enum:keys
GET_SOURCE	compile.c	/^#define GET_SOURCE$/;"	d	file:
GET_SOURCE	main.c	/^#define GET_SOURCE$/;"	d	file:
GET_SOURCE_H	getSource.c	/^#define GET_SOURCE_H$/;"	d	file:
Gtr	getSource.h	/^  Equal, Lss, Gtr,$/;"	e	enum:keys
GtrEq	getSource.h	/^  NotEq, LssEq, GtrEq,$/;"	e	enum:keys
Id	getSource.h	/^  Id, Num, nul,     \/* トークンの種類 *\/$/;"	e	enum:keys
If	getSource.h	/^  If, Then,$/;"	e	enum:keys
KeyId	getSource.h	/^} KeyId;$/;"	t	typeref:enum:keys
KeyWdT	getSource.c	/^static struct keyWd KeyWdT[] = {$/;"	v	typeref:struct:keyWd[]	file:
KindT	table.h	/^} KindT;$/;"	t	typeref:enum:kindT
Lparen	getSource.h	/^  Lparen, Rparen,$/;"	e	enum:keys
Lss	getSource.h	/^  Equal, Lss, Gtr,$/;"	e	enum:keys
LssEq	getSource.h	/^  NotEq, LssEq, GtrEq,$/;"	e	enum:keys
MAXERROR	getSource.c	/^#define MAXERROR /;"	d	file:
MAXLEVEL	table.c	/^#define MAXLEVEL /;"	d	file:
MAXLINE	getSource.c	/^#define MAXLINE /;"	d	file:
MAXNAME	getSource.h	/^#define MAXNAME /;"	d
MAXNAME	table.c	/^#define MAXNAME /;"	d	file:
MAXNUM	getSource.c	/^#define MAXNUM /;"	d	file:
MAXTABLE	table.c	/^#define MAXTABLE /;"	d	file:
MINEERROR	compile.c	/^#define MINEERROR /;"	d	file:
Minus	getSource.h	/^  Plus, Minus,      \/* 演算記号, 区切り記号 *\/$/;"	e	enum:keys
Mult	getSource.h	/^  Mult, Div,$/;"	e	enum:keys
NotEq	getSource.h	/^  NotEq, LssEq, GtrEq,$/;"	e	enum:keys
Num	getSource.h	/^  Id, Num, nul,     \/* トークンの種類 *\/$/;"	e	enum:keys
Odd	getSource.h	/^  Var, Const, Odd,$/;"	e	enum:keys
Period	getSource.h	/^  Comma, Period, Semicolon,$/;"	e	enum:keys
Plus	getSource.h	/^  Plus, Minus,      \/* 演算記号, 区切り記号 *\/$/;"	e	enum:keys
RelAddr	table.h	/^} RelAddr;$/;"	t	typeref:struct:relAddr
Ret	getSource.h	/^  Ret, Func,$/;"	e	enum:keys
Rparen	getSource.h	/^  Lparen, Rparen,$/;"	e	enum:keys
Semicolon	getSource.h	/^  Comma, Period, Semicolon,$/;"	e	enum:keys
TAB	getSource.c	/^#define TAB /;"	d	file:
TBL	compile.c	/^#define TBL$/;"	d	file:
TBL	getSource.c	/^#define TBL$/;"	d	file:
TBL	getSource.h	/^#define TBL$/;"	d
TBL	table.c	/^#define TBL$/;"	d	file:
Then	getSource.h	/^  If, Then,$/;"	e	enum:keys
Token	getSource.h	/^} Token;$/;"	t	typeref:struct:token
Var	getSource.h	/^  Var, Const, Odd,$/;"	e	enum:keys
While	getSource.h	/^  While, Do,$/;"	e	enum:keys
Write	getSource.h	/^  Write, WriteLn,$/;"	e	enum:keys
WriteLn	getSource.h	/^  Write, WriteLn,$/;"	e	enum:keys
__anon075000ac010a	getSource.h	/^  union {$/;"	u	struct:token
addr	table.h	/^  int addr;$/;"	m	struct:relAddr	typeref:typename:int
cToken	getSource.c	/^static Token cToken;      \/* 最後に読んだトークン *\/$/;"	v	typeref:typename:Token	file:
ch	getSource.c	/^static char ch;           \/* 最後に読んだ文字 *\/$/;"	v	typeref:typename:char	file:
charClassT	getSource.c	/^static KeyId charClassT[256];  \/* 文字の種類を表にする *\/$/;"	v	typeref:typename:KeyId[256]	file:
colon	getSource.h	/^  letter, digit, colon, others, \/* その他の文字の種類 *\/$/;"	e	enum:keys
compile	compile.c	/^int compile() {$/;"	f	typeref:typename:int
constId	table.h	/^  varId, funcId, parId, constId$/;"	e	enum:kindT
digit	getSource.h	/^  letter, digit, colon, others, \/* その他の文字の種類 *\/$/;"	e	enum:keys
end_of_KeySym	getSource.h	/^  end_of_KeySym,$/;"	e	enum:keys
end_of_KeyWd	getSource.h	/^  end_of_KeyWd,$/;"	e	enum:keys
end_of_Token	getSource.h	/^  end_of_Token,$/;"	e	enum:keys
errorNo	getSource.c	/^static int errorNo = 0;$/;"	v	typeref:typename:int	file:
fpi	getSource.c	/^static FILE *fpi;    \/* source file *\/$/;"	v	typeref:typename:FILE *	file:
fptex	getSource.c	/^static FILE *fptex;  \/* LaTex出力 *\/$/;"	v	typeref:typename:FILE *	file:
funcId	table.h	/^  varId, funcId, parId, constId$/;"	e	enum:kindT
id	getSource.h	/^    char id[MAXNAME];      \/* Identifierの時, その名前 *\/$/;"	m	union:token::__anon075000ac010a	typeref:typename:char[]
idKind	getSource.c	/^static KindT idKind;      \/* 現トークン(id)の種類 *\/$/;"	v	typeref:typename:KindT	file:
initCharClassT	getSource.c	/^static void initCharClassT() { \/* 文字の種類を示す表を作る *\/$/;"	f	typeref:typename:void	file:
initSource	getSource.c	/^void initSource() {$/;"	f	typeref:typename:void
keyId	getSource.c	/^  KeyId keyId;$/;"	m	struct:keyWd	typeref:typename:KeyId	file:
keyWd	getSource.c	/^struct keyWd {$/;"	s	file:
keys	getSource.h	/^typedef enum keys {$/;"	g
kind	getSource.h	/^  KeyId kind;              \/* トークンの種類かkeyの名前 *\/$/;"	m	struct:token	typeref:typename:KeyId
kindT	table.h	/^typedef enum kindT {               \/* Indetifierの種類 *\/$/;"	g
letter	getSource.h	/^  letter, digit, colon, others, \/* その他の文字の種類 *\/$/;"	e	enum:keys
level	table.h	/^  int level;$/;"	m	struct:relAddr	typeref:typename:int
line	getSource.c	/^static char line[MAXLINE];\/* 1行分のバッファ*\/$/;"	v	typeref:typename:char[]	file:
lineIndex	getSource.c	/^static int lineIndex;     \/* 次に読む文字の位置 *\/$/;"	v	typeref:typename:int	file:
main	main.c	/^int main() {$/;"	f	typeref:typename:int
main	target.c	/^int main() {$/;"	f	typeref:typename:int
nextChar	getSource.c	/^char nextChar() {$/;"	f	typeref:typename:char
nextToken	getSource.c	/^Token nextToken() {$/;"	f	typeref:typename:Token
nul	getSource.h	/^  Id, Num, nul,     \/* トークンの種類 *\/$/;"	e	enum:keys
openSource	getSource.c	/^int openSource(char fileName[]) {$/;"	f	typeref:typename:int
others	getSource.h	/^  letter, digit, colon, others, \/* その他の文字の種類 *\/$/;"	e	enum:keys
outputSourceCode	getSource.c	/^void outputSourceCode() {$/;"	f	typeref:typename:void
parId	table.h	/^  varId, funcId, parId, constId$/;"	e	enum:kindT
pl-0	README.md	/^# pl-0$/;"	c
printSpaces	getSource.c	/^static void printSpaces() {$/;"	f	typeref:typename:void	file:
printcToken	getSource.c	/^void printcToken() {$/;"	f	typeref:typename:void
printed	getSource.c	/^static int printed;       \/* トークンは印字済みか *\/$/;"	v	typeref:typename:int	file:
relAddr	table.h	/^typedef struct relAddr {           \/* 変数, 引数, 関数のアドレスの型 *\/$/;"	s
spaces	getSource.c	/^static int spaces;        \/* そのトークンの前のスペースの個数 *\/$/;"	v	typeref:typename:int	file:
token	compile.c	/^static Token token;$/;"	v	typeref:typename:Token	file:
token	getSource.h	/^typedef struct token {     \/* トークンの型 *\/$/;"	s
u	getSource.h	/^  } u;$/;"	m	struct:token	typeref:union:token::__anon075000ac010a
value	getSource.h	/^    int value;$/;"	m	union:token::__anon075000ac010a	typeref:typename:int
varId	table.h	/^  varId, funcId, parId, constId$/;"	e	enum:kindT
word	getSource.c	/^  char *word;$/;"	m	struct:keyWd	typeref:typename:char *	file:
